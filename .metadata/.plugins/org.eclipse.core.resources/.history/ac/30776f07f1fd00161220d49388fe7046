package application;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import TurtleDetails.Turtle;
import TurtleDetails.TurtleState;
import TurtleDetails.TurtleTrail;
import exceptions.StateNotFoundException;
import javafx.beans.binding.Bindings;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.ObservableMap;
import javafx.collections.ObservableSet;
/**
 * Contains all the info that is specific to each running SLogo application.
 * All data structures are observable.
 * Only returns
 * 
 * Needs to throw exceptions for unfound names.
 * 
 * @author Daniel
 *
 */
public class Model {
	private ObservableMap<String, Turtle> myTurtles;
	private ObservableSet<TurtleTrail> allTrails;
	private ObservableList<String> inputHistory;
	private ObservableMap<String,String> userCommands;
	private ObservableMap<String,String> userVariables;
	
	public Model(){
		myTurtles=FXCollections.observableMap(new HashMap<String,Turtle>());
		myTurtles.put("turtle", new Turtle());
		allTrails=FXCollections.observableSet(new HashSet<>());
		inputHistory=FXCollections.observableList(new ArrayList<>());
		userCommands=FXCollections.observableMap(new HashMap<>());
		userVariables=FXCollections.observableMap(new HashMap<>());
	}
	
	public void addTurtle(String turtleName, Turtle turtle){
		myTurtles.put(turtleName, turtle);
	}
	
	public Turtle getTurtle(String turtleName){
		return myTurtles.get(turtleName);
	}
	
	public void removeTurtle(String turtleName){
		myTurtles.remove(turtleName);
	}

	public void addCommand(String command, String actions){
		userCommands.put(command, actions);
	}
	
	public void removeCommand(String command){
		userCommands.remove(command);
	}
	
	public void removeAllCommands(){
		userCommands.clear();
	}
	
	public void addVariable(String variable, String values){
		userVariables.put(variable, values);
	}
	
	public void addTrail(TurtleTrail trail){
		allTrails.add(trail);
	}	
	
	public Set<TurtleTrail> getTrails(){
		return allTrails;
	}
	
	public ObservableList<String> readOnlyHistory(){
		return inputHistory;
	}
	
	public Map<String,String> readOnlyCommands(){
		return Collections.unmodifiableMap(userCommands);
	}
	
	public Map<String,String> readOnlyVariables(){
		return Collections.unmodifiableMap(userVariables);
	}
	
	public Set<TurtleTrail> readOnlyTrails(){
		return Collections.unmodifiableSet(allTrails);
	}
	
	public void updateTurtles(){
		
	}
	
	public void addTrails(){
		
	}
	
	public Set<TurtleState> getTurtleStates() throws StateNotFoundException{
		Set<TurtleState> states=new HashSet<>();
		for(Turtle t:myTurtles.values()){
			states.add(t.getFirstTurtleState());
		}
		return states;
	}
	
	private Map<String, Turtle> copyTurtleMap(Map<String,Turtle> map){
		Map<String, Turtle> copyMap=new HashMap<>();
		for(String s:map.keySet()){
			String key=new String(s);
			Turtle value=map.get(s).copy();
			copyMap.put(key, value);
		}
		return copyMap;
	}
	
	
	
}
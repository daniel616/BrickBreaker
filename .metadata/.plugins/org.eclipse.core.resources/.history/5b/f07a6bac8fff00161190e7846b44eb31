import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Scanner;
import java.util.Set;
import java.util.Stack;


/**
 * Runs a number of algorithms that try to fit files onto disks.
 */
public class Bins {
    public static final String DATA_FILE = "example.txt";
    public static final double GB_SIZE=1000000;

    /**
     * Finds the number of disks needed to store files. The second method sorts the files by size; the first method does not.
     */
    public static void main (String args[]) {
    	Bins b= new Bins();
    	List<Integer> data =b.readData();           
        PriorityQueue<Disk> pq=b.makeDiskQueue(data);        
        b.printResultsAndClearQueue("worst-fit method",pq);
        Collections.sort(data, Collections.reverseOrder());
        pq=b.makeDiskQueue(data);
        b.printResultsAndClearQueue("worst-fit decreasing method", pq);
       
    }  
    
    public List<Integer> readData(){
    	Scanner input = new Scanner(Bins.class.getClassLoader().getResourceAsStream(DATA_FILE));
    	List<Integer> data = new ArrayList<Integer>();
        while (input.hasNext()) {
            data.add(input.nextInt());
        }
        input.close();
        int total =0;
        for (Integer size: data){
        	total+=size;
        }
        System.out.println("total size = " + total / GB_SIZE + "GB");
        return data;
    }
    
    private PriorityQueue<Disk> makeDiskQueue(List<Integer> data){
    	PriorityQueue<Disk> pq = new PriorityQueue<Disk>();
        pq.add(new Disk(0));
        int diskId = 1;
        for (Integer size : data) {
            Disk d = pq.peek();
            if (d.freeSpace() >= size) {
            	pq.poll();
                d.add(size);
                pq.add(d);
            } else {
                Disk d2 = new Disk(diskId);
                diskId++;
                d2.add(size);
                pq.add(d2);
            }
        }
        
        return pq;
    }
    
    private void printResultsAndClearQueue(String message, Collection<Disk> queue){
    	 System.out.println();
         System.out.println(message);
         System.out.println("number of disks used: " + queue.size());
         for(Disk d:queue){
             System.out.println(d);
         }
         System.out.println();
    }
}

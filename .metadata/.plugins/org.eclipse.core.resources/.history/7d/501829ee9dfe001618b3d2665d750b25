package gui;

import java.io.File;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import TurtleDetails.TurtleState;
import TurtleDetails.TurtleTrail;
import controls.Controller;

import java.io.FileNotFoundException;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.geometry.Insets;
import javafx.scene.control.Button;
import javafx.scene.control.ColorPicker;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.StackPane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Line;
import javafx.scene.shape.Rectangle;
import javafx.util.Duration;
import javafx.stage.FileChooser;
import javafx.stage.FileChooser.ExtensionFilter;
import javafx.stage.Stage;
import javafx.util.Duration;

/**
 * This class will be able to return a screen that contains the turtle objects
 * and a button panel and is scrollable. It will also contain the ability to ask
 * the back end for new commands for each turtle and update their screen
 * positions accordingly.
 * 
 * Created February 23rd, 2017
 * 
 * @author Jake Conroy
 *
 */

public class TurtleScreen {
	private HBox buttonsBox = new HBox();
	private Button startStop;
	private Button clearScreen;
	private Button newTurtle;
	private Button chooseTurtleImage;
	private Rectangle canvas = new Rectangle();
	private BorderPane holdAll = new BorderPane();
	private StackPane holdScreen = new StackPane();
	private boolean run = true; // set to false so that everything can work the
								// way it did before
	private Controller control;
	private ColorPicker backgroundColorChooser;
	private ColorPicker turtleTrailColorChooser;
	private HBox colorChooserMenu;
	private Stage stage;
	private Image image;
	private Timeline animation;
	private double TIME_BETWEEN_FRAME = 1;

	public static final String TURTLE_IMAGES = "turtle_images";
	public static final String DEFAULT_TURTLE_IMAGE = "cute_turtle.jpg";
	public static final int SCREEN_SIZE = 600;
	public static final int TURTLE_SIZE = 45;

	public TurtleScreen(Controller c) {
		control = c;
		makeButtonBox();
		makeButtons();
		makeMenu();
		makeScreen();
		step();//Added this just to show the turtle initially, delete later
		animate();
	}

	/**
	 * 
	 * @return the screen that contains the turtle on it
	 */
	public Pane getTurtleScreen() {
		return holdAll;
	}

	private void animate() {
		animation = new Timeline();
		KeyFrame frame = new KeyFrame(Duration.seconds(TIME_BETWEEN_FRAME), e -> {
			if (run) {
				step();
			}
		});
		animation.setCycleCount(Timeline.INDEFINITE);
		animation.getKeyFrames().add(frame);
		animation.play();
	}

	private void step() {
		// dummy collections created for now just to compile code with,
		// collections come from controller
		System.out.println("holdscreen size"+holdScreen.getHeight());
		clearScreen();
		control.updateTrails();
		control.updateTurtles();
		Collection<TurtleTrail> turtleTrails = control.getTurtleTrails();
		Collection<TurtleState> turtleStates = control.getTurtleStates();

		for (TurtleState state : turtleStates) {
			if (state.turtleShowing()) {
				ImageView turtle = new ImageView(image);
				/*
				turtle.setX(translateCoords(state.getX()));
				turtle.setY(translateCoords(state.getY()));*/
				turtle.setX(state.getX());
				turtle.setY(state.getY());
				turtle.setRotate(state.getHeading());
				holdScreen.getChildren().add(turtle);
			}
		}

		for (TurtleTrail trail : turtleTrails) {
			if (trail.penDown()) {
				Line recentlyDrawnTrail = new Line();
				recentlyDrawnTrail.setFill(trail.penColor());
				recentlyDrawnTrail.setStartX(translateCoords(trail.getX1()));
				recentlyDrawnTrail.setStartY(translateCoords(trail.getY1()));
				recentlyDrawnTrail.setEndX(translateCoords(trail.getX2()));
				recentlyDrawnTrail.setEndY(translateCoords(trail.getY2()));
				holdScreen.getChildren().add(recentlyDrawnTrail);
			}
		}

	}

	private double translateCoords(double curr) {
		return curr + SCREEN_SIZE / 2;
	}

	private void makeButtonBox() {
		buttonsBox.setPadding(new Insets(10, 10, 10, 10));
		buttonsBox.setSpacing(10);
		buttonsBox.setStyle("-fx-background-color: #00ffff;");
	}

	private void makeButtons() {
		startStop = new Button("Start/Stop");
		startStop.setPrefSize(100, 25);
		startStop.setOnAction(e -> toggleAnimation());
		clearScreen = new Button("Clear");
		clearScreen.setPrefSize(100, 25);
		clearScreen.setOnAction(e -> clearScreen());
		newTurtle = new Button("Add Turtle");
		newTurtle.setPrefSize(100, 25);
		newTurtle.setOnAction(e -> addTurtleToScreen());
		buttonsBox.getChildren().addAll(startStop, clearScreen, newTurtle);
		chooseTurtleImage = new Button("Choose Turtle Image");
		//chooseTurtleImage.setOnAction(e -> chooseNewTurtleImage());
	}

	private void makeMenu() {
		backgroundColorChooser = new ColorPicker();
		backgroundColorChooser.setOnAction(e -> canvas.setFill(backgroundColorChooser.getValue()));
		turtleTrailColorChooser = new ColorPicker();
		// turtleTrailColorChooser.setOnAction(e -> ct.set=
		// turtleTrailColorChooser.getValue());
		colorChooserMenu = new HBox();
		colorChooserMenu.setPadding(new Insets(10, 10, 10, 10));
		colorChooserMenu.setSpacing(10);
		colorChooserMenu.setStyle("-fx-background-color: #00ffff;");
		colorChooserMenu.getChildren().addAll(backgroundColorChooser, chooseTurtleImage, turtleTrailColorChooser);
	}

	private void makeScreen() {
		canvas.setWidth(SCREEN_SIZE);
		canvas.setHeight(SCREEN_SIZE);
		canvas.setFill(Color.WHITE);
		holdScreen.getChildren().add(canvas);
		holdAll.setBottom(buttonsBox);
		holdAll.setCenter(holdScreen);
		holdAll.setTop(colorChooserMenu);
		image = new Image(getClass().getClassLoader().getResourceAsStream(DEFAULT_TURTLE_IMAGE), TURTLE_SIZE,
				TURTLE_SIZE, true, true);
	}

	private void toggleAnimation() {
		run = !run;
	}

	public void clearScreen() {
		holdScreen.getChildren().clear(); // TODO: change this so that it will
											// not delete the turtle, but rather
											// will just send it home
		holdScreen.getChildren().add(canvas);
		image = new Image(getClass().getClassLoader().getResourceAsStream(DEFAULT_TURTLE_IMAGE), TURTLE_SIZE,
				TURTLE_SIZE, true, true);
		// makeScreen();
	}

	private void addTurtleToScreen() {
		// control.addTurtle();
	}

	private String chooseNewTurtlePath() {
		String currentDirectory = System.getProperty("user.dir");
		FileChooser fileChooser = new FileChooser();
		fileChooser.setTitle("Open Turtle Image File");
		fileChooser.setInitialDirectory(new File(currentDirectory + File.separator + TURTLE_IMAGES + File.separator));
		fileChooser.getExtensionFilters().addAll(new ExtensionFilter("Turtle Images", "*.jpg"));
		return fileChooser.showOpenDialog(new Stage()).toString();
	}

	private void chooseNewTurtleImage() {
		String fullPath = chooseNewTurtlePath();
		String[] splitPath = fullPath.split(File.separator);
		String justTheFile = splitPath[splitPath.length - 1];
		image = new Image(getClass().getClassLoader().getResourceAsStream(justTheFile), TURTLE_SIZE, TURTLE_SIZE, true,
				true);
	}

}
